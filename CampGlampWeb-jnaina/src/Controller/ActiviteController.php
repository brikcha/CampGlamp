<?php

namespace App\Controller;

use App\Entity\Activite;
use App\Form\ActiviteType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Request;
use Twilio\Rest\Client; // sms 
use Knp\Component\Pager\PaginatorInterface; //  appelons le bundle KNP Paginator
use App\Repository\ActiviteRepository;


class ActiviteController extends AbstractController

{
  /** @var Client $twilio */
      private $twilio;

   public function __construct(Client $twilio)
 {
       $this->twilio = $twilio;
   }

    /**
     * @Route("/activite", name="display_activite")
     */
    public function index(Request $request, PaginatorInterface $paginator): Response
    {
        $donnees=$this->getDoctrine()->getManager()->getRepository(Activite::class)->findAll();

        $act = $paginator->paginate(
            $donnees, // Requête contenant les données à paginer (ici activite)
            $request->query->getInt('page', 1), // Numéro de la page en cours, passé dans l'URL, 1 si aucune page
            6 // Nombre de résultats par page
        );
        return $this->render('activite/index.html.twig', [
            'a' => $act
        ]);
    }

    /**
     * @Route("/addActivite", name="addActivite")
     */
    public function addActivite(Request $request): Response
    {
        $activite = new Activite();

        $form = $this->createForm(ActiviteType::class,$activite);

        $form->handleRequest($request);

        if($form->isSubmitted() && $form->isValid()) {

            $file=$activite->getVideo();
            $filename = $this->generateUniqueFileName().'.'.$file->guessExtension();
            $file->move($this->getParameter('upload_directory'),$filename);

            $activite->setVideo($filename);
            $em = $this->getDoctrine()->getManager();
            $em->persist($activite);//Add
            $em->flush();

            return $this->redirectToRoute('display_activite');
        }
        return $this->render('activite/createActivite.html.twig',['f'=>$form->createView()]);
    }

    private function generateUniqueFileName()
   {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

   /**
     * @Route("/removeActivite/{id}", name="supp_activite")
     */
    public function suppressionActivite(Activite $activite): Response
    {
        $em = $this->getDoctrine()->getManager();
        $em->remove($activite);
        $em->flush();


     // send un sms  lors de suppression d'une activité 

    $sid    = "AC640c968983e84e5cade1b0518bb6fb7a"; 
   $token  = "faf3162979ecbec27312abcadc430fa4"; 
    $twilio = new Client($sid,$token); 
     
    $message = $twilio->messages 
                      ->create("+21652541994", // to 
                               array(  
                                   "messagingServiceSid" => "MGcaa0de873179ed6a7ee3271380299b2a",      
                                   "body" => "votre activitée  est supprimée   "
                                
                               ) 
                      ); 
     
    print($message->sid);

        return $this->redirectToRoute('display_activite');//refrech actualiser 


    }

    /**
     * @Route("/modifActivite/{id}", name="modifActivite")
     */
    public function modifActivite(Request $request,$id): Response
    {
        $activite = $this->getDoctrine()->getManager()->getRepository(Activite::class)->find($id);

        $form = $this->createForm(ActiviteType::class,$activite);

        $form->handleRequest($request);

        if($form->isSubmitted() && $form->isValid()) {

            $file=$activite->getVideo();
            $filename = $this->generateUniqueFileName().'.'.$file->guessExtension();
           $file->move($this->getParameter('upload_directory'),$filename);
            $activite->setVideo($filename);
            $em = $this->getDoctrine()->getManager();
            $em->flush();

            return $this->redirectToRoute('display_activite');
        }
        return $this->render('activite/updateActivite.html.twig',['f'=>$form->createView()]);
    }

  
     //trier selon prix activite 
   /**
     * @Route("act/tri", name="triact")
     */

    public function triPrixDesc(Request $request)
    {

        $em = $this->getDoctrine()->getManager();

        $query = $em->createQuery(
          'SELECT a FROM App\Entity\Activite a
          ORDER BY a.prixActivite  DESC'
       );

        $act = $query->getResult(); 

    return $this->render('activite/index.html.twig',
      array('a' => $act));


          
   }
    
    


 





}
