<?php

namespace App\Controller;

use App\Entity\Event;
use App\Form\EventType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Session\SessionInterface;
use App\Repository\EventRepository;
use Symfony\Component\HttpFoundation\JsonResponse;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
use Symfony\Component\Serializer\Serializer;
use Knp\Component\Pager\PaginatorInterface; //  appelons le bundle KNP Paginator

class EventController extends AbstractController
{
    /**
     * @Route("/", name="display_event")
     */
    public function index(Request $request, PaginatorInterface $paginator): Response
    {
        $donnees=$this->getDoctrine()->getManager()->getRepository(Event::class)->findAll();

        $event = $paginator->paginate(
            $donnees, // Requête contenant les données à paginer (ici event)
            $request->query->getInt('page', 1), // Numéro de la page en cours, passé dans l'URL, 1 si aucune page
            6 // Nombre de résultats par page
        );
        return $this->render('event/index.html.twig', [
                'e'=> $event
        ]);
    }

    /**
     * @Route("/addEvent", name="addEvent")
     */
    public function addEvent(Request $request): Response
    {
        $event = new Event();

        $form = $this->createForm(EventType::class,$event);

        $form->handleRequest($request);

        if($form->isSubmitted() && $form->isValid()) {

            $file=$event->getImage();
            $filename = $this->generateUniqueFileName().'.'.$file->guessExtension();
            $file->move($this->getParameter('photos_directory'),$filename);#on copie fichier dans doss images

            $event->setImage($filename); #stocke imag dan BD et mettre image $fichier
            $em = $this->getDoctrine()->getManager();
            $em->persist($event);//Add
            $em->flush();

            return $this->redirectToRoute('display_event');
        }
        return $this->render('event/createEvent.html.twig',['f'=>$form->createView()]);
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid()); #génerer un nouv nom de doss
    }

   /**
     * @Route("/removeEvent/{id}", name="supp_event")
    */
    public function suppressionEvent(Event $event,$id): Response
   {
        $em = $this->getDoctrine()->getManager();
        $em->remove($event);
        $em->flush();

        return $this->redirectToRoute('display_event');//refrech actualiser 


    }

   
   /**
     * @Route("/modifEvent/{id}", name="modifEvent")
     */
    public function modifEvent(Request $request,$id): Response
    {
        $event = $this->getDoctrine()->getManager()->getRepository(Event::class)->find($id);

        $form = $this->createForm(EventType::class,$event);

        $form->handleRequest($request);

        if($form->isSubmitted() && $form->isValid()) {

            $file=$event->getImage();
            $filename = $this->generateUniqueFileName().'.'.$file->guessExtension();
            $file->move($this->getParameter('photos_directory'),$filename);
            $event->setImage($filename);
            $em = $this->getDoctrine()->getManager();
            $em->flush();

            return $this->redirectToRoute('display_event');
        }
        return $this->render('event/updateEvent.html.twig',['f'=>$form->createView()]);
    }

     /**
     * @Route("/searchEventeajax ", name="ajaxEvent")
     */
    public function searchEventajax(Request $request)
        {
            $repository = $this->getDoctrine()->getRepository(Event::class);
            $requestString=$request->get('searchValue');
            $events = $repository->findEventbyname($requestString);

            return $this->render('event/eventajax.html.twig', [
                "e"=>$events
            ]);
        }


    public function getRealEntities($event){
        foreach($event as $e){
           $realEntities[$e->getId()]=[$e->getNom(),$e->getDescription(),$e->getPrix(),$e->getLieu(),$e->getDate()];
           
           return $realEntities;
        }
    }






     /**
     * @Route("event/tri", name="trievent")
     */
    public function triPrixDesc(Request $request,SessionInterface $session)
    {
       $em = $this->getDoctrine()->getManager();

       $query = $em->createQuery(
            'SELECT e FROM App\Entity\Event e
            ORDER BY e.prix  DESC'
       );

       $event = $query->getResult();

       return $this->render('front/event/index.html.twig',
           array('event' => $event));
   }

  

}

